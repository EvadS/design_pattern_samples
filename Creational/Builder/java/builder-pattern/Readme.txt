Паттерн Builder является паттерном создания объектов (creational pattern). Суть его заключается в том, чтобы отделить
процесс создания некоторого сложного объекта от его представления. Таким образом, можно получать различные представления
 объекта, используя один и тот же "технологический" процесс

  Применимость
  Когда вы хотите избавиться от «телескопического конструктора».

  Допустим, у вас есть один конструктор с десятью опциональными параметрами. Его неудобно вызывать, поэтому вы создали
   ещё десять конструкторов с меньшим количеством параметров. Всё, что они делают — это переадресуют вызов к базовому
   конструктору, подавая какие-то значения по умолчанию в параметры, которые пропущены в них самих.

 class Pizza {
     Pizza(int size) { ... }
     Pizza(int size, boolean cheese) { ... }
     Pizza(int size, boolean cheese, boolean pepperoni) { ... }
     // ...
 Такого монстра можно создать только в языках, имеющих механизм перегрузки методов, например, С# или Java.

 Паттерн Строитель позволяет собирать объекты пошагово, вызывая только те шаги, которые вам нужны. А значит, больше не
 нужно пытаться «запихнуть» в конструктор все возможные опции продукта.

  Когда ваш код должен создавать разные представления какого-то объекта. Например, деревянные и железобетонные дома.

  Строитель можно применить, если создание нескольких представлений объекта состоит из одинаковых этапов, которые
  отличаются в деталях.

 Интерфейс строителей определит все возможные этапы конструирования. Каждому представлению будет соответствовать
  собственный класс-строитель. А порядок этапов строительства будет задавать класс-директор.